{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NatCastro28/Class2023/blob/main/TallerDplyr%26PandasRESUELTO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install rpy2==3.5.1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jQRDSNBCJ6r4",
        "outputId": "9dd115c8-9913-48be-ebdb-ccc2bdc7ca83"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: rpy2==3.5.1 in /usr/local/lib/python3.9/dist-packages (3.5.1)\n",
            "Requirement already satisfied: tzlocal in /usr/local/lib/python3.9/dist-packages (from rpy2==3.5.1) (4.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from rpy2==3.5.1) (3.1.2)\n",
            "Requirement already satisfied: cffi>=1.10.0 in /usr/local/lib/python3.9/dist-packages (from rpy2==3.5.1) (1.15.1)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.9/dist-packages (from rpy2==3.5.1) (2022.7.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.9/dist-packages (from cffi>=1.10.0->rpy2==3.5.1) (2.21)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.9/dist-packages (from jinja2->rpy2==3.5.1) (2.1.2)\n",
            "Requirement already satisfied: pytz-deprecation-shim in /usr/local/lib/python3.9/dist-packages (from tzlocal->rpy2==3.5.1) (0.1.0.post0)\n",
            "Requirement already satisfied: tzdata in /usr/local/lib/python3.9/dist-packages (from pytz-deprecation-shim->tzlocal->rpy2==3.5.1) (2023.3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# activate R magic\n",
        "%load_ext rpy2.ipython"
      ],
      "metadata": {
        "id": "194moOZ4J80p",
        "outputId": "6cf4fadf-e48b-4ae2-abd3-aff49e160edf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The rpy2.ipython extension is already loaded. To reload it, use:\n",
            "  %reload_ext rpy2.ipython\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este taller permitirÃ¡ poner en prÃ¡ctica el uso de dplyr en R, pandas y numpy en Python. Para ello, vamos a crear un conjunto de datos ficticio que contendrÃ¡ informaciÃ³n sobre ventas de productos en diferentes regiones y periodos de tiempo."
      ],
      "metadata": {
        "id": "QED3EexoJrJc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#CreaciÃ³n del dataset\n",
        "\n",
        "Para crear nuestro dataset, vamos a utilizar la funciÃ³n data.frame() en R y pd.DataFrame() en Python. Para ello, vamos a crear una lista con las variables que queremos incluir en nuestro dataset y luego convertiremos esa lista en un data frame.\n"
      ],
      "metadata": {
        "id": "k-YFTgRvJxeC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "library(\"dplyr\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jrOkKizDKO7m",
        "outputId": "6eeb2048-7c31-4659-8799-3dadbf36e927"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "Attaching package: â€˜dplyrâ€™\n",
            "\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: The following objects are masked from â€˜package:statsâ€™:\n",
            "\n",
            "    filter, lag\n",
            "\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: The following objects are masked from â€˜package:baseâ€™:\n",
            "\n",
            "    intersect, setdiff, setequal, union\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RzYiw_cIJli_"
      },
      "outputs": [],
      "source": [
        "%%R\n",
        "\n",
        "# Crear lista con las variables del dataset\n",
        "ventas <- list(\n",
        "  producto = c(\"Producto A\", \"Producto B\", \"Producto C\", \"Producto A\", \"Producto B\", \"Producto C\"),\n",
        "  region = c(\"Norte\", \"Norte\", \"Norte\", \"Sur\", \"Sur\", \"Sur\"),\n",
        "  periodo = c(\"Enero\", \"Enero\", \"Enero\", \"Febrero\", \"Febrero\", \"Febrero\"),\n",
        "  ventas = c(100, 50, 75, 200, 150, 100)\n",
        ")\n",
        "\n",
        "# Convertir lista en data frame\n",
        "ventas_df <- data.frame(ventas)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En Python:"
      ],
      "metadata": {
        "id": "K5dX2q1iKDk7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Crear lista con las variables del dataset\n",
        "ventas = {\n",
        "    \"producto\": [\"Producto A\", \"Producto B\", \"Producto C\", \"Producto A\", \"Producto B\", \"Producto C\"],\n",
        "    \"region\": [\"Norte\", \"Norte\", \"Norte\", \"Sur\", \"Sur\", \"Sur\"],\n",
        "    \"periodo\": [\"Enero\", \"Enero\", \"Enero\", \"Febrero\", \"Febrero\", \"Febrero\"],\n",
        "    \"ventas\": [100, 50, 75, 200, 150, 100]\n",
        "}\n",
        "\n",
        "# Convertir lista en data frame\n",
        "ventas_df = pd.DataFrame(ventas)\n"
      ],
      "metadata": {
        "id": "6uEI9hoyKEXv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Una vez que tenemos nuestro dataset, podemos proceder a realizar diferentes tareas utilizando dplyr en R y pandas y numpy en Python."
      ],
      "metadata": {
        "id": "bguJLqC5KaUr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Taller"
      ],
      "metadata": {
        "id": "r_rXoWRhKdQB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "A continuaciÃ³n, presentamos un taller de 10 (o mÃ¡s ðŸ”¥) puntos que nos permitirÃ¡ poner en prÃ¡ctica el uso de dplyr en R y pandas y numpy en Python con nuestro dataset de ventas.\n",
        "\n",
        "1. Carga los datos y visualiza el dataset. para cada dataset vamos a imprimir el encabezado para verificar que estÃ¡ bien cargado. \n",
        "\n",
        "Ãšnicamente en python vamos a aplicar la orden describe()para ver un recuento estadÃ­stico y entender como se estÃ¡n comportando los datos. \n",
        "\n"
      ],
      "metadata": {
        "id": "q_r_pRG_Kg4A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "cilavRs1LX8U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35469b62-f746-48f4-c7e8-56604314d911"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NULL\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "OFXsL9l9L3FE"
      },
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Filtra el dataset para obtener las ventas de \"Producto A\".\n"
      ],
      "metadata": {
        "id": "YLDvfUNOLauL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->\n",
        "ventas_A = ventas_df %>%\n",
        "  filter(producto == \"Producto A\") %>%\n",
        "  select(ventas)\n",
        "\n",
        "ventas_A"
      ],
      "metadata": {
        "id": "wxTyyCn2LdFJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f27c3db9-9b9c-4fb0-c196-6aa91031635c"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  ventas\n",
            "1    200\n",
            "2    100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ventas_A = ventas_df.loc[ventas_df[\"producto\"] == \"Producto A\", [\"ventas\"]]\n",
        "\n",
        "ventas_A"
      ],
      "metadata": {
        "id": "8NjVMDvRL2UW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "outputId": "2245b5dc-c59c-438f-c50f-441e08833dd3"
      },
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ventas\n",
              "0     100\n",
              "3     200"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f2e702e-0123-4573-8b9b-15e23732a1cf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ventas</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f2e702e-0123-4573-8b9b-15e23732a1cf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3f2e702e-0123-4573-8b9b-15e23732a1cf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3f2e702e-0123-4573-8b9b-15e23732a1cf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Agrupa el dataset por regiÃ³n y periodo y calcula la media de las ventas.\n"
      ],
      "metadata": {
        "id": "K5uoJjNxLda9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "ventas_media = ventas_df %>%\n",
        "  group_by(region, periodo) %>%\n",
        "  summarise(media_ventas = mean(ventas))\n",
        "\n",
        "ventas_media"
      ],
      "metadata": {
        "id": "En6_jQBGLtg2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 694
        },
        "outputId": "0da7e074-d350-4a8f-8a25-3f9dd776176e"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error in `group_by()`:\n",
            "! Must group by variables found in `.data`.\n",
            "Column `region` is not found.\n",
            "Column `periodo` is not found.\n",
            "Run `rlang::last_trace()` to see where the error occurred.\n",
            "\n",
            "Error in group_by(., region, periodo) : \n",
            "Column `region` is not found.\n",
            "Column `periodo` is not found.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "RInterpreterError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRRuntimeError\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, code)\u001b[0m\n\u001b[1;32m    279\u001b[0m                 \u001b[0;31m# Need the newline in case the last line in code is a comment.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m                 \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisible\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mro\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"withVisible({%s\\n})\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mri\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRRuntimeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/robjects/__init__.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, string)\u001b[0m\n\u001b[1;32m    450\u001b[0m         \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrinterface\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 451\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    452\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrpy2py\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/robjects/functions.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    200\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr_k\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m         return (super(SignatureTranslatedFunction, self)\n\u001b[0m\u001b[1;32m    202\u001b[0m                 .__call__(*args, **kwargs))\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/robjects/functions.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    123\u001b[0m                 \u001b[0mnew_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy2rpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFunction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnew_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mnew_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrpy2py\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/rinterface_lib/conversion.py\u001b[0m in \u001b[0;36m_\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m         \u001b[0mcdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m         \u001b[0;31m# TODO: test cdata is of the expected CType\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/rinterface.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merror_occured\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 810\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0membedded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_rinterface\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_geterrmessage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    811\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRRuntimeError\u001b[0m: Error in group_by(., region, periodo) : \nColumn `region` is not found.\nColumn `periodo` is not found.\n",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mRInterpreterError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-181-be13c8bb91c8>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'R'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'\\nventas_media = ventas_df %>%\\n  group_by(region, periodo) %>%\\n  summarise(media_ventas = mean(ventas))\\n\\nventas_media\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m    331\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m       \u001b[0mcell\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 333\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2471\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2472\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2473\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2474\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<decorator-gen-122>\u001b[0m in \u001b[0;36mR\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36mR\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m    793\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 795\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    796\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36mR\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m    773\u001b[0m                     \u001b[0mreturn_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    774\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 775\u001b[0;31m                 \u001b[0mtext_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisible\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    776\u001b[0m                 \u001b[0mtext_output\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mtext_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    777\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mvisible\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, code)\u001b[0m\n\u001b[1;32m    282\u001b[0m                 \u001b[0;31m# Otherwise next return seems to have copy of error.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    283\u001b[0m                 \u001b[0mwarning_or_other_msg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 284\u001b[0;31m                 raise RInterpreterError(code, str(exception),\n\u001b[0m\u001b[1;32m    285\u001b[0m                                         warning_or_other_msg)\n\u001b[1;32m    286\u001b[0m             \u001b[0mtext_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRInterpreterError\u001b[0m: Failed to parse and evaluate line '\\nventas_media = ventas_df %>%\\n  group_by(region, periodo) %>%\\n  summarise(media_ventas = mean(ventas))\\n\\nventas_media\\n'.\nR error message: 'Error in group_by(., region, periodo) : \\nColumn `region` is not found.\\nColumn `periodo` is not found.'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ventas_media = ventas_df.groupby([\"region\", \"periodo\"])[\"ventas\"].mean().reset_index(name=\"media_ventas\")\n",
        "\n",
        "print(ventas_media)"
      ],
      "metadata": {
        "id": "nL6tCiD5L18f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 346
        },
        "outputId": "48591e02-dbb4-4cb4-b8bf-c293dbd386a1"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-185-7e0d7eaa135c>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mventas_media\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mventas_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"region\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"periodo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ventas\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"media_ventas\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mventas_media\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(self, by, axis, level, as_index, sort, group_keys, squeeze, observed, dropna)\u001b[0m\n\u001b[1;32m   7719\u001b[0m         \u001b[0;31m# error: Argument \"squeeze\" to \"DataFrameGroupBy\" has incompatible type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7720\u001b[0m         \u001b[0;31m# \"Union[bool, NoDefault]\"; expected \"bool\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7721\u001b[0;31m         return DataFrameGroupBy(\n\u001b[0m\u001b[1;32m   7722\u001b[0m             \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7723\u001b[0m             \u001b[0mkeys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mby\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj, keys, axis, level, grouper, exclusions, selection, as_index, sort, group_keys, squeeze, observed, mutated, dropna)\u001b[0m\n\u001b[1;32m    880\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrouper\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_grouper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 882\u001b[0;31m             grouper, exclusions, obj = get_grouper(\n\u001b[0m\u001b[1;32m    883\u001b[0m                 \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    884\u001b[0m                 \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/groupby/grouper.py\u001b[0m in \u001b[0;36mget_grouper\u001b[0;34m(obj, key, axis, level, sort, observed, mutated, validate, dropna)\u001b[0m\n\u001b[1;32m    880\u001b[0m                 \u001b[0min_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 882\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    883\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGrouper\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    884\u001b[0m             \u001b[0;31m# Add key to exclusions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'region'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Calcula la suma total de las ventas para cada periodo.\n"
      ],
      "metadata": {
        "id": "YdJvm3gtLfO-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->\n",
        "ventas_suma = ventas_df %>%\n",
        "group_by(periodo) %>%\n",
        "summarise(suma_ventas = sum(ventas))\n",
        "\n",
        "ventas_suma"
      ],
      "metadata": {
        "id": "9nc3o0EALupg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 642
        },
        "outputId": "d3e01cd1-4252-48d2-8629-f9945e3795cf"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error in `group_by()`:\n",
            "! Must group by variables found in `.data`.\n",
            "âœ– Column `periodo` is not found.\n",
            "Run `rlang::last_trace()` to see where the error occurred.\n",
            "\n",
            "Error in group_by(., periodo) : \n",
            "âœ– Column `periodo` is not found.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "RInterpreterError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRRuntimeError\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, code)\u001b[0m\n\u001b[1;32m    279\u001b[0m                 \u001b[0;31m# Need the newline in case the last line in code is a comment.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m                 \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisible\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mro\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"withVisible({%s\\n})\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mri\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRRuntimeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/robjects/__init__.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, string)\u001b[0m\n\u001b[1;32m    450\u001b[0m         \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrinterface\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 451\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    452\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrpy2py\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/robjects/functions.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    200\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr_k\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m         return (super(SignatureTranslatedFunction, self)\n\u001b[0m\u001b[1;32m    202\u001b[0m                 .__call__(*args, **kwargs))\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/robjects/functions.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    123\u001b[0m                 \u001b[0mnew_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpy2rpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFunction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnew_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mnew_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconversion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrpy2py\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/rinterface_lib/conversion.py\u001b[0m in \u001b[0;36m_\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m         \u001b[0mcdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m         \u001b[0;31m# TODO: test cdata is of the expected CType\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/rinterface.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merror_occured\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 810\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0membedded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_rinterface\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_geterrmessage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    811\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRRuntimeError\u001b[0m: Error in group_by(., periodo) : \nâœ– Column `periodo` is not found.\n",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mRInterpreterError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-186-7ac775685b69>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'R'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'#Your Code here guys! --->\\nventas_suma = ventas_df %>%\\ngroup_by(periodo) %>%\\nsummarise(suma_ventas = sum(ventas))\\n\\nventas_suma\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m    331\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m       \u001b[0mcell\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 333\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2471\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2472\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2473\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2474\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2475\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<decorator-gen-122>\u001b[0m in \u001b[0;36mR\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36mR\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m    793\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 795\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    796\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36mR\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m    773\u001b[0m                     \u001b[0mreturn_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    774\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 775\u001b[0;31m                 \u001b[0mtext_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvisible\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    776\u001b[0m                 \u001b[0mtext_output\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mtext_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    777\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mvisible\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/rpy2/ipython/rmagic.py\u001b[0m in \u001b[0;36meval\u001b[0;34m(self, code)\u001b[0m\n\u001b[1;32m    282\u001b[0m                 \u001b[0;31m# Otherwise next return seems to have copy of error.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    283\u001b[0m                 \u001b[0mwarning_or_other_msg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 284\u001b[0;31m                 raise RInterpreterError(code, str(exception),\n\u001b[0m\u001b[1;32m    285\u001b[0m                                         warning_or_other_msg)\n\u001b[1;32m    286\u001b[0m             \u001b[0mtext_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflush\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRInterpreterError\u001b[0m: Failed to parse and evaluate line '#Your Code here guys! --->\\nventas_suma = ventas_df %>%\\ngroup_by(periodo) %>%\\nsummarise(suma_ventas = sum(ventas))\\n\\nventas_suma\\n'.\nR error message: 'Error in group_by(., periodo) : \\nâœ– Column `periodo` is not found.'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "zPb4QAO2L1bG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Utiliza la funciÃ³n mutate() en R y assign() en Python para crear una nueva variable que calcule la diferencia entre las ventas de cada producto y la media de las ventas de ese producto.\n"
      ],
      "metadata": {
        "id": "UWLU88qvLhIE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "PeZE9qQ0LvWd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "Wrky4HyML0_e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "6 .Utiliza la funciÃ³n arrange() en R y sort_values() en Python para ordenar el dataset por ventas de mayor a menor.\n"
      ],
      "metadata": {
        "id": "roLWgO0bLjTs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "6oduHJuSLv0P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "I_RoBBLuL0fx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Utiliza la funciÃ³n select() en R y loc[] en Python para seleccionar las variables \"producto\" y \"ventas\".\n"
      ],
      "metadata": {
        "id": "QJgrGW6xLk5Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "IDtfBbB1LwUN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "kMrlUidSLz-s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Utiliza la funciÃ³n filter() en R y query() en Python para filtrar el dataset para obtener las ventas de \"Producto A\" en la regiÃ³n Norte.\n"
      ],
      "metadata": {
        "id": "fvAUVtarLmWW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "9ci3_FDULxCR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "FCGjjH84LzlW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. Utiliza la funciÃ³n summarise() en R y agg() en Python para calcular la suma total de las ventas de \"Producto A\".\n"
      ],
      "metadata": {
        "id": "W3xzooFoLn0v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "LHNLOOqoLxq8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "ksgl1-AlLzOL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Utiliza la funciÃ³n group_by() en R y groupby()"
      ],
      "metadata": {
        "id": "bLklXUcULpZt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "Qb5Xit0PLyQB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "uUko7g6aLyo1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bien, ahora juguemos con datos propios. "
      ],
      "metadata": {
        "id": "b8YLXKyT8Xr3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Vamos a cargar 2 archivos, por un lado el documento CSV que tienen en sus repositorios de github. y ademÃ¡s vamos a cargar la base de datos superstore que tendrÃ¡n el siguiente link. \n",
        "\n",
        "https://docs.google.com/spreadsheets/d/1r2ee4kEpcUJBUscoDQd0gImOvWb_iECj/edit?usp=sharing&ouid=106132101569136404581&rtpof=true&sd=true\n",
        "\n"
      ],
      "metadata": {
        "id": "X3NxlVx28b9t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Usando el primer set de datos vamos a trabajar Ãºnicamente en R"
      ],
      "metadata": {
        "id": "tcVCb2IKXVDQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. vamos a seleccionar solo las columnas Gender, Age y satisfaction conformando un nuevo datagrame llamado seleccion."
      ],
      "metadata": {
        "id": "kkwOmV2FXYVL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "44kfc3nFXqG6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Ahora usando el nuevo df que hemos creado vamos a filtrar solo las filas donde la satisfacciÃ³n es \"satisfied\" y a guardarlo en un df3:"
      ],
      "metadata": {
        "id": "NUPjkOQqXo7G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "UIW6xDEsXvdP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. vamos a agrupar los datos por gÃ©nero y calcular la edad promedio y a guardarlo en un df4:"
      ],
      "metadata": {
        "id": "FbwdkOzWX3Lc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "Dzk8yZzhgH06"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. vamos a ordenar los resultados de seleccion por edad de mayor a menor, despuÃ©s vamos a agruparlos por gÃ©nero y vamos a averiguar la sumatoria de cada gÃ©nero para cada grupo los satisfechos y los insatisfechos. Este nuevo conteo lo vamos a guardar en una columna nueva llamada a y esto lo guardaremos en un nuevo df llamado df5"
      ],
      "metadata": {
        "id": "3kuTZrGOYH9_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "a_PHBCQygIJR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Muy bien, ya hemos logrado trabajar sobre la primera base de datos, ahora vamos a cargar la segunda base de datos, para ello usaremos el acceso a google drive que nos brinda google colab. "
      ],
      "metadata": {
        "id": "btrN5tWTnxql"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "b2DIFZIYvqfY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Perfecto, como ya tenemos nuestra base de datos montada sobre python vamos a hacer un anÃ¡lisis descriptivo de la base de datos usando .describe() asÃ­ podremos ver cÃ³mo se comporta mi base de datos. "
      ],
      "metadata": {
        "id": "qtNVkn8ovtwC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "2D2DxkG7v_Ho"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora vamos a importar las librerÃ­as seaborn y matplotlib."
      ],
      "metadata": {
        "id": "OuqsSFs8fUr5"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "yFPjcje_fVzm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Muy bien, ahora vamos a pasar esta base de datos "
      ],
      "metadata": {
        "id": "_aArLk8DwAO-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Your Code here guys! --->"
      ],
      "metadata": {
        "id": "HqaJ9u-AoERP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Vamos a visualizar los datos del dataframe para la variable categorÃ­a en el eje X y ventas en el eje Y en un grÃ¡fico de boxplot. "
      ],
      "metadata": {
        "id": "0yTeA7rlfkwL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6qSrTAhrfrYH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#El taller va desde esta parte de aquÃ­!!!"
      ],
      "metadata": {
        "id": "mG2-5fGKlt-X"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "6BYFdlvFftl-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora hagÃ¡mos lo mismo en R."
      ],
      "metadata": {
        "id": "LDhOHJRvIptI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primero importemos la base de datos al entorno de python"
      ],
      "metadata": {
        "id": "P3AFfmybIwNe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "JfT1vg6NeJlS"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas.io.excel import read_excel"
      ],
      "metadata": {
        "id": "3ETNoVaUW4Gt"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "url='/content/drive/MyDrive/Sample - Superstore.xlsx'\n",
        "df=pd.read_excel (url)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        },
        "id": "_VaSqUW3W89b",
        "outputId": "b5a58e54-e315-466c-ec27-f71b827b97d2"
      },
      "execution_count": 206,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Columna1        Order ID Order Date  Ship Date       Ship Mode  \\\n",
              "0            1  CA-2017-152156 2017-11-08 2017-11-11    Second Class   \n",
              "1            2  CA-2017-152156 2017-11-08 2017-11-11    Second Class   \n",
              "2            3  CA-2017-138688 2017-06-12 2017-06-16    Second Class   \n",
              "3            4  US-2016-108966 2016-10-11 2016-10-18  Standard Class   \n",
              "4            5  US-2016-108966 2016-10-11 2016-10-18  Standard Class   \n",
              "...        ...             ...        ...        ...             ...   \n",
              "9989      9990  CA-2015-110422 2015-01-21 2015-01-23    Second Class   \n",
              "9990      9991  CA-2018-121258 2018-02-26 2018-03-03  Standard Class   \n",
              "9991      9992  CA-2018-121258 2018-02-26 2018-03-03  Standard Class   \n",
              "9992      9993  CA-2018-121258 2018-02-26 2018-03-03  Standard Class   \n",
              "9993      9994  CA-2018-119914 2018-05-04 2018-05-09    Second Class   \n",
              "\n",
              "     Customer ID     Customer Name    Segment        Country             City  \\\n",
              "0       CG-12520       Claire Gute   Consumer  United States        Henderson   \n",
              "1       CG-12520       Claire Gute   Consumer  United States        Henderson   \n",
              "2       DV-13045   Darrin Van Huff  Corporate  United States      Los Angeles   \n",
              "3       SO-20335    Sean O'Donnell   Consumer  United States  Fort Lauderdale   \n",
              "4       SO-20335    Sean O'Donnell   Consumer  United States  Fort Lauderdale   \n",
              "...          ...               ...        ...            ...              ...   \n",
              "9989    TB-21400  Tom Boeckenhauer   Consumer  United States            Miami   \n",
              "9990    DB-13060       Dave Brooks   Consumer  United States       Costa Mesa   \n",
              "9991    DB-13060       Dave Brooks   Consumer  United States       Costa Mesa   \n",
              "9992    DB-13060       Dave Brooks   Consumer  United States       Costa Mesa   \n",
              "9993    CC-12220      Chris Cortes   Consumer  United States      Westminster   \n",
              "\n",
              "      ... Postal Code  Region       Product ID         Category Sub-Category  \\\n",
              "0     ...     42420.0   South  FUR-BO-10001798        Furniture    Bookcases   \n",
              "1     ...     42420.0   South  FUR-CH-10000454        Furniture       Chairs   \n",
              "2     ...     90036.0    West  OFF-LA-10000240  Office Supplies       Labels   \n",
              "3     ...     33311.0   South  FUR-TA-10000577        Furniture       Tables   \n",
              "4     ...     33311.0   South  OFF-ST-10000760  Office Supplies      Storage   \n",
              "...   ...         ...     ...              ...              ...          ...   \n",
              "9989  ...     33180.0   South  FUR-FU-10001889        Furniture  Furnishings   \n",
              "9990  ...     92627.0    West  FUR-FU-10000747        Furniture  Furnishings   \n",
              "9991  ...     92627.0    West  TEC-PH-10003645       Technology       Phones   \n",
              "9992  ...     92627.0    West  OFF-PA-10004041  Office Supplies        Paper   \n",
              "9993  ...     92683.0    West  OFF-AP-10002684  Office Supplies   Appliances   \n",
              "\n",
              "                                           Product Name     Sales  Quantity  \\\n",
              "0                     Bush Somerset Collection Bookcase  261.9600         2   \n",
              "1     Hon Deluxe Fabric Upholstered Stacking Chairs,...  731.9400         3   \n",
              "2     Self-Adhesive Address Labels for Typewriters b...   14.6200         2   \n",
              "3         Bretford CR4500 Series Slim Rectangular Table  957.5775         5   \n",
              "4                        Eldon Fold 'N Roll Cart System   22.3680         2   \n",
              "...                                                 ...       ...       ...   \n",
              "9989                             Ultra Door Pull Handle   25.2480         3   \n",
              "9990  Tenex B1-RE Series Chair Mats for Low Pile Car...   91.9600         2   \n",
              "9991                              Aastra 57i VoIP phone  258.5760         2   \n",
              "9992  It's Hot Message Books with Stickers, 2 3/4\" x 5\"   29.6000         4   \n",
              "9993  Acco 7-Outlet Masterpiece Power Center, Wihtou...  243.1600         2   \n",
              "\n",
              "      Discount    Profit  \n",
              "0         0.00   41.9136  \n",
              "1         0.00  219.5820  \n",
              "2         0.00    6.8714  \n",
              "3         0.45 -383.0310  \n",
              "4         0.20    2.5164  \n",
              "...        ...       ...  \n",
              "9989      0.20    4.1028  \n",
              "9990      0.00   15.6332  \n",
              "9991      0.20   19.3932  \n",
              "9992      0.00   13.3200  \n",
              "9993      0.00   72.9480  \n",
              "\n",
              "[9994 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a84ed4a-ab37-4b7f-9590-1bc40cad0074\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Columna1</th>\n",
              "      <th>Order ID</th>\n",
              "      <th>Order Date</th>\n",
              "      <th>Ship Date</th>\n",
              "      <th>Ship Mode</th>\n",
              "      <th>Customer ID</th>\n",
              "      <th>Customer Name</th>\n",
              "      <th>Segment</th>\n",
              "      <th>Country</th>\n",
              "      <th>City</th>\n",
              "      <th>...</th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Region</th>\n",
              "      <th>Product ID</th>\n",
              "      <th>Category</th>\n",
              "      <th>Sub-Category</th>\n",
              "      <th>Product Name</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>CA-2017-152156</td>\n",
              "      <td>2017-11-08</td>\n",
              "      <td>2017-11-11</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>CG-12520</td>\n",
              "      <td>Claire Gute</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Henderson</td>\n",
              "      <td>...</td>\n",
              "      <td>42420.0</td>\n",
              "      <td>South</td>\n",
              "      <td>FUR-BO-10001798</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Bookcases</td>\n",
              "      <td>Bush Somerset Collection Bookcase</td>\n",
              "      <td>261.9600</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>41.9136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>CA-2017-152156</td>\n",
              "      <td>2017-11-08</td>\n",
              "      <td>2017-11-11</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>CG-12520</td>\n",
              "      <td>Claire Gute</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Henderson</td>\n",
              "      <td>...</td>\n",
              "      <td>42420.0</td>\n",
              "      <td>South</td>\n",
              "      <td>FUR-CH-10000454</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Chairs</td>\n",
              "      <td>Hon Deluxe Fabric Upholstered Stacking Chairs,...</td>\n",
              "      <td>731.9400</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>219.5820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>CA-2017-138688</td>\n",
              "      <td>2017-06-12</td>\n",
              "      <td>2017-06-16</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>DV-13045</td>\n",
              "      <td>Darrin Van Huff</td>\n",
              "      <td>Corporate</td>\n",
              "      <td>United States</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>...</td>\n",
              "      <td>90036.0</td>\n",
              "      <td>West</td>\n",
              "      <td>OFF-LA-10000240</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Labels</td>\n",
              "      <td>Self-Adhesive Address Labels for Typewriters b...</td>\n",
              "      <td>14.6200</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>6.8714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>US-2016-108966</td>\n",
              "      <td>2016-10-11</td>\n",
              "      <td>2016-10-18</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>SO-20335</td>\n",
              "      <td>Sean O'Donnell</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Fort Lauderdale</td>\n",
              "      <td>...</td>\n",
              "      <td>33311.0</td>\n",
              "      <td>South</td>\n",
              "      <td>FUR-TA-10000577</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Tables</td>\n",
              "      <td>Bretford CR4500 Series Slim Rectangular Table</td>\n",
              "      <td>957.5775</td>\n",
              "      <td>5</td>\n",
              "      <td>0.45</td>\n",
              "      <td>-383.0310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>US-2016-108966</td>\n",
              "      <td>2016-10-11</td>\n",
              "      <td>2016-10-18</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>SO-20335</td>\n",
              "      <td>Sean O'Donnell</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Fort Lauderdale</td>\n",
              "      <td>...</td>\n",
              "      <td>33311.0</td>\n",
              "      <td>South</td>\n",
              "      <td>OFF-ST-10000760</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Storage</td>\n",
              "      <td>Eldon Fold 'N Roll Cart System</td>\n",
              "      <td>22.3680</td>\n",
              "      <td>2</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2.5164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9989</th>\n",
              "      <td>9990</td>\n",
              "      <td>CA-2015-110422</td>\n",
              "      <td>2015-01-21</td>\n",
              "      <td>2015-01-23</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>TB-21400</td>\n",
              "      <td>Tom Boeckenhauer</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Miami</td>\n",
              "      <td>...</td>\n",
              "      <td>33180.0</td>\n",
              "      <td>South</td>\n",
              "      <td>FUR-FU-10001889</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Furnishings</td>\n",
              "      <td>Ultra Door Pull Handle</td>\n",
              "      <td>25.2480</td>\n",
              "      <td>3</td>\n",
              "      <td>0.20</td>\n",
              "      <td>4.1028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9990</th>\n",
              "      <td>9991</td>\n",
              "      <td>CA-2018-121258</td>\n",
              "      <td>2018-02-26</td>\n",
              "      <td>2018-03-03</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>DB-13060</td>\n",
              "      <td>Dave Brooks</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Costa Mesa</td>\n",
              "      <td>...</td>\n",
              "      <td>92627.0</td>\n",
              "      <td>West</td>\n",
              "      <td>FUR-FU-10000747</td>\n",
              "      <td>Furniture</td>\n",
              "      <td>Furnishings</td>\n",
              "      <td>Tenex B1-RE Series Chair Mats for Low Pile Car...</td>\n",
              "      <td>91.9600</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>15.6332</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9991</th>\n",
              "      <td>9992</td>\n",
              "      <td>CA-2018-121258</td>\n",
              "      <td>2018-02-26</td>\n",
              "      <td>2018-03-03</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>DB-13060</td>\n",
              "      <td>Dave Brooks</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Costa Mesa</td>\n",
              "      <td>...</td>\n",
              "      <td>92627.0</td>\n",
              "      <td>West</td>\n",
              "      <td>TEC-PH-10003645</td>\n",
              "      <td>Technology</td>\n",
              "      <td>Phones</td>\n",
              "      <td>Aastra 57i VoIP phone</td>\n",
              "      <td>258.5760</td>\n",
              "      <td>2</td>\n",
              "      <td>0.20</td>\n",
              "      <td>19.3932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9992</th>\n",
              "      <td>9993</td>\n",
              "      <td>CA-2018-121258</td>\n",
              "      <td>2018-02-26</td>\n",
              "      <td>2018-03-03</td>\n",
              "      <td>Standard Class</td>\n",
              "      <td>DB-13060</td>\n",
              "      <td>Dave Brooks</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Costa Mesa</td>\n",
              "      <td>...</td>\n",
              "      <td>92627.0</td>\n",
              "      <td>West</td>\n",
              "      <td>OFF-PA-10004041</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Paper</td>\n",
              "      <td>It's Hot Message Books with Stickers, 2 3/4\" x 5\"</td>\n",
              "      <td>29.6000</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>13.3200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9993</th>\n",
              "      <td>9994</td>\n",
              "      <td>CA-2018-119914</td>\n",
              "      <td>2018-05-04</td>\n",
              "      <td>2018-05-09</td>\n",
              "      <td>Second Class</td>\n",
              "      <td>CC-12220</td>\n",
              "      <td>Chris Cortes</td>\n",
              "      <td>Consumer</td>\n",
              "      <td>United States</td>\n",
              "      <td>Westminster</td>\n",
              "      <td>...</td>\n",
              "      <td>92683.0</td>\n",
              "      <td>West</td>\n",
              "      <td>OFF-AP-10002684</td>\n",
              "      <td>Office Supplies</td>\n",
              "      <td>Appliances</td>\n",
              "      <td>Acco 7-Outlet Masterpiece Power Center, Wihtou...</td>\n",
              "      <td>243.1600</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>72.9480</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9994 rows Ã— 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a84ed4a-ab37-4b7f-9590-1bc40cad0074')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3a84ed4a-ab37-4b7f-9590-1bc40cad0074 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3a84ed4a-ab37-4b7f-9590-1bc40cad0074');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "KdZAjSiIYpd3",
        "outputId": "3c34dd4f-06bc-4fae-9e18-7b862f255628"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Columna1   Postal Code         Sales     Quantity     Discount  \\\n",
              "count  9994.000000   9983.000000   9994.000000  9994.000000  9994.000000   \n",
              "mean   4997.500000  55245.233297    229.858001     3.789574     0.156203   \n",
              "std    2885.163629  32038.715955    623.245101     2.225110     0.206452   \n",
              "min       1.000000   1040.000000      0.444000     1.000000     0.000000   \n",
              "25%    2499.250000  23223.000000     17.280000     2.000000     0.000000   \n",
              "50%    4997.500000  57103.000000     54.490000     3.000000     0.200000   \n",
              "75%    7495.750000  90008.000000    209.940000     5.000000     0.200000   \n",
              "max    9994.000000  99301.000000  22638.480000    14.000000     0.800000   \n",
              "\n",
              "            Profit  \n",
              "count  9994.000000  \n",
              "mean     28.656896  \n",
              "std     234.260108  \n",
              "min   -6599.978000  \n",
              "25%       1.728750  \n",
              "50%       8.666500  \n",
              "75%      29.364000  \n",
              "max    8399.976000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc5dc668-bbd2-4372-ae42-0d102bbeb5c4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Columna1</th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Sales</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Discount</th>\n",
              "      <th>Profit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9994.000000</td>\n",
              "      <td>9983.000000</td>\n",
              "      <td>9994.000000</td>\n",
              "      <td>9994.000000</td>\n",
              "      <td>9994.000000</td>\n",
              "      <td>9994.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4997.500000</td>\n",
              "      <td>55245.233297</td>\n",
              "      <td>229.858001</td>\n",
              "      <td>3.789574</td>\n",
              "      <td>0.156203</td>\n",
              "      <td>28.656896</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2885.163629</td>\n",
              "      <td>32038.715955</td>\n",
              "      <td>623.245101</td>\n",
              "      <td>2.225110</td>\n",
              "      <td>0.206452</td>\n",
              "      <td>234.260108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1040.000000</td>\n",
              "      <td>0.444000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-6599.978000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2499.250000</td>\n",
              "      <td>23223.000000</td>\n",
              "      <td>17.280000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.728750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4997.500000</td>\n",
              "      <td>57103.000000</td>\n",
              "      <td>54.490000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>8.666500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7495.750000</td>\n",
              "      <td>90008.000000</td>\n",
              "      <td>209.940000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>29.364000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9994.000000</td>\n",
              "      <td>99301.000000</td>\n",
              "      <td>22638.480000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>8399.976000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc5dc668-bbd2-4372-ae42-0d102bbeb5c4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dc5dc668-bbd2-4372-ae42-0d102bbeb5c4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dc5dc668-bbd2-4372-ae42-0d102bbeb5c4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install rpy2[robjects,pandas]\n"
      ],
      "metadata": {
        "id": "mB5tDO-feMXg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install rpy2==3.5.1"
      ],
      "metadata": {
        "id": "7Duxo_xvePr6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# activate R magic\n",
        "%load_ext rpy2.ipython"
      ],
      "metadata": {
        "id": "6PzirIC4eU_2"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "install.packages(\"gapminder\")\n",
        "install.packages(\"dslabs\")\n",
        "install.packages(\"NHANES\")\n",
        "install.packages(\"tidyverse\")\n",
        "install.packages(\"GGally\")\n",
        "install.packages(\"readxl\")\n",
        "install.packages (\"xlsx\")\n",
        "install.packages (\"openxlsx\")"
      ],
      "metadata": {
        "id": "4_A7mxoyeaC4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "library(\"tidyverse\")\n",
        "library(gapminder)\n",
        "library(dplyr)\n",
        "library(dslabs)\n",
        "library(NHANES)\n",
        "data(NHANES)\n",
        "data(heights)\n",
        "data(murders)\n",
        "data(gapminder)\n",
        "library(\"ggplot2\")\n",
        "library(\"GGally\")"
      ],
      "metadata": {
        "id": "TwW0duJiey9J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "install.packages(\"gapminder\")\n",
        "install.packages(\"dslabs\")\n",
        "install.packages(\"NHANES\")\n",
        "install.packages(\"dplyr\")\n"
      ],
      "metadata": {
        "id": "T3Kpad3maX7U",
        "outputId": "ad7a1ad1-b40f-46aa-bca0-ffc1121e8da1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Installing package into â€˜/usr/local/lib/R/site-libraryâ€™\n",
            "(as â€˜libâ€™ is unspecified)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: trying URL 'https://cran.rstudio.com/src/contrib/gapminder_1.0.0.tar.gz'\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Content type 'application/x-gzip'\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]:  length 2202445 bytes (2.1 MB)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: downloaded 2.1 MB\n",
            "\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: The downloaded source packages are in\n",
            "\tâ€˜/tmp/RtmpdA3fmg/downloaded_packagesâ€™\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Installing package into â€˜/usr/local/lib/R/site-libraryâ€™\n",
            "(as â€˜libâ€™ is unspecified)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: trying URL 'https://cran.rstudio.com/src/contrib/dslabs_0.7.4.tar.gz'\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Content type 'application/x-gzip'\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]:  length 3389330 bytes (3.2 MB)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: downloaded 3.2 MB\n",
            "\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: The downloaded source packages are in\n",
            "\tâ€˜/tmp/RtmpdA3fmg/downloaded_packagesâ€™\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Installing package into â€˜/usr/local/lib/R/site-libraryâ€™\n",
            "(as â€˜libâ€™ is unspecified)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: trying URL 'https://cran.rstudio.com/src/contrib/NHANES_2.1.0.tar.gz'\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Content type 'application/x-gzip'\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]:  length 1263731 bytes (1.2 MB)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: downloaded 1.2 MB\n",
            "\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: The downloaded source packages are in\n",
            "\tâ€˜/tmp/RtmpdA3fmg/downloaded_packagesâ€™\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Installing package into â€˜/usr/local/lib/R/site-libraryâ€™\n",
            "(as â€˜libâ€™ is unspecified)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: trying URL 'https://cran.rstudio.com/src/contrib/dplyr_1.1.1.tar.gz'\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: Content type 'application/x-gzip'\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]:  length 1082508 bytes (1.0 MB)\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: =\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: downloaded 1.0 MB\n",
            "\n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: The downloaded source packages are in\n",
            "\tâ€˜/tmp/RtmpdA3fmg/downloaded_packagesâ€™\n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "WARNING:rpy2.rinterface_lib.callbacks:R[write to console]: \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%R -i df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1uqEQpJlXbr7",
        "outputId": "333a3634-d419-4aa2-806b-0a4a289a740b"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/rpy2/robjects/pandas2ri.py:54: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n",
            "  for name, values in obj.iteritems():\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/arrays/datetimes.py:2177: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result, tz_parsed = tslib.array_to_datetime(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py:7414: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result = lib.maybe_convert_objects(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/arrays/datetimes.py:2177: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result, tz_parsed = tslib.array_to_datetime(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/arrays/datetimes.py:2177: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result, tz_parsed = tslib.array_to_datetime(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/dtypes/dtypes.py:812: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  and tz_compare(self.tz, other.tz)\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py:6216: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  and not tz_compare(self.tz, other.tz)\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/arrays/datetimes.py:2177: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result, tz_parsed = tslib.array_to_datetime(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py:7414: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result = lib.maybe_convert_objects(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/arrays/datetimes.py:2177: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result, tz_parsed = tslib.array_to_datetime(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/arrays/datetimes.py:2177: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  result, tz_parsed = tslib.array_to_datetime(\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/dtypes/dtypes.py:812: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  and tz_compare(self.tz, other.tz)\n",
            "/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py:6216: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  and not tz_compare(self.tz, other.tz)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NULL\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/pandas/core/dtypes/dtypes.py:812: PytzUsageWarning: The zone attribute is specific to pytz's interface; please migrate to a new time zone provider. For more details on how to do so, see https://pytz-deprecation-shim.readthedocs.io/en/latest/migration.html\n",
            "  and tz_compare(self.tz, other.tz)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%R \n",
        "sample_df <- data.frame(sample)"
      ],
      "metadata": {
        "id": "zaYE0PgpdKDz"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora vamos a graficar resultados. "
      ],
      "metadata": {
        "id": "67_cxxe0I11t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "ggplot(df, aes(x=Category, y=Sales)) +\n",
        "\n",
        "geom_boxplot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "id": "XhmswltWmDmB",
        "outputId": "133d1390-b799-4cbd-dc49-bdabdc0a5910"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "u8RqMzgzY5wc"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pregunta, quÃ© tan comprensible es la grÃ¡fica? se puede interpretar los cuartÃ­les aquÃ­?. De no ser asÃ­, vamos a eliminar los valores extremos para intentar obtener una mejor visual de los grÃ¡ficos. \n",
        "\n",
        "Para eso vamos a retirar los valores extremos calculando los cuartiles y el mÃ©todo IQR."
      ],
      "metadata": {
        "id": "pebt1ZhY-_4o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular lÃ­mites para la variable 'Category' usando el mÃ©todo IQR\n",
        "Q1 = df['Sales'].quantile(0.25)\n",
        "Q3 = df['Sales'].quantile(0.75)\n",
        "\n",
        "IQR = Q3 - Q1\n",
        "lower_limit = Q1 - 1.5 * IQR \n",
        "upper_limit = Q3 + 1.5 * IQR \n",
        "\n",
        "# Eliminar outliers\n",
        "df = df[(df['Sales'] > lower_limit) & (df['Sales'] < upper_limit)]\n",
        "sns.boxplot(x='Category', y='Sales', data=df)\n"
      ],
      "metadata": {
        "id": "N6dOeOqa_OLq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "outputId": "5551fc17-8d2f-41f6-e4c3-eb4efe897953"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Category', ylabel='Sales'>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "# Calcular lÃ­mites para la variable 'Category' usando el mÃ©todo IQR\n",
        "Q1 <- quantile(df$Sales, 0.25)\n",
        "Q3 <- quantile(df$Sales,0.75)\n",
        "\n",
        "IQR <- Q3 - Q1\n",
        "lower_limit <- Q1 - 1.5 * IQR\n",
        "upper_limit <- Q3 + 1.5 * IQR\n",
        "\n",
        "# Eliminar outliers\n",
        "df <- df[df$Sales > lower_limit & df$Sales < upper_limit, ]\n",
        "\n",
        "# Crear box plot usando ggplot2\n",
        "ggplot (df, aes(x= Category, y= Sales)) +\n",
        "geom_boxplot()"
      ],
      "metadata": {
        "id": "snbBJp4UBtZt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "7a875194-fc45-4e25-d269-454731850045"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora la pregunta es... dentro de los cuartiles de ventas, cuÃ¡l es la categorÃ­a que ha vendido menos valor monetario?\n",
        "\n",
        "A. Furniture.\n",
        "B. Office Supplies.\n",
        "C. Technology. "
      ],
      "metadata": {
        "id": "Fpehpak-JstD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "# Encontrar la region que mÃ¡s vendiÃ³\n",
        "top_region <- df %>%\n",
        "  group_by(Category) %>%\n",
        "  summarise(Total_Ventas = sum(Sales)) %>%\n",
        "  arrange(desc(Total_Ventas)) %>%\n",
        "  slice(1)\n",
        "\n",
        "# Crear un plot\n",
        "ggplot() +\n",
        "  geom_bar (data = top_region, aes(x = reorder(Category, Total_Ventas), y = Total_Ventas), stat = \"identity\", fill = \"yellow\") +\n",
        "  labs(title = \"Total de Ventas por CategorÃ­a\", x = \"CategorÃ­a\", y = \"Total de Ventas\") +\n",
        "  geom_bar(data = df, aes (x= Category, y = Sales), stat = \"identity\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "IM45dxSRNVxQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "466b92e2-1cba-4e2e-cf8c-283ad5d40d6e"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Encontrar la region que mÃ¡s vendiÃ³\n",
        "top_region = df.groupby('Region')['Sales'].sum().sort_values(ascending=False).index[0]\n",
        "\n",
        "\n",
        "# Crear un plot\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.bar(df['Region'], df['Sales'])\n",
        "plt.xlabel('Region')\n",
        "plt.ylabel('Total de Ventas')\n",
        "plt.title('Total de Ventas por RegiÃ³n')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "anrMi_EzOXBB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "e5f6458e-30eb-44b9-8ec4-952ef227574c"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "usando la misma base de datos, crea un cÃ³digo en R y uno en python que: \n",
        "\n",
        "1. filtre la informaciÃ³n referente a 'Sean O'Donnell'. \n",
        "2. crea un plot que me indique el nombre del producto y el valor que comprÃ³ esta persona"
      ],
      "metadata": {
        "id": "29cWAT-iPk3r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "# Filtrar informaciÃ³n de \"Sean O'Donnell\"\n",
        "df_filtered <- df[df$variable == \"Sean O'Donnell\",]\n"
      ],
      "metadata": {
        "id": "S8YVhm4BPik1"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "# Filtrar profits positivos\n",
        "df_positives = df[df$Profit > 0,]\n"
      ],
      "metadata": {
        "id": "DgWj-MWyP9ON"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "df_filtered_positive_profits <- df_filtered[df_filtered$profits> 0, ]"
      ],
      "metadata": {
        "id": "Sui3ljICkpz4"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "#Grafico\n",
        "\n",
        "ggplot(data = df_filtered_positive_profits, aes(x=\"Category\", y= \"Profit\")) +\n",
        "geom_bar(stat = \"identity\", fill= \"yellow\") +\n",
        "labs(title = \"Profits Positivos por Categoria\", x=\"Category\", y= \"Profit\")\n",
        "\n"
      ],
      "metadata": {
        "id": "5wCo5fL7Vuox",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "560bc06c-3e1c-4052-a6d3-f29e027afe52"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrar profits positivos\n",
        "df_positives = df[df ['Profit'] > 0]"
      ],
      "metadata": {
        "id": "YNJTIodnv9uF"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(df_positives)"
      ],
      "metadata": {
        "id": "pk0xTCG0WwbG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "0faf13d6-98b8-4216-9780-7bf308f06ded"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 135
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A pesar de esto, la legibilidad de los grÃ¡ficos es casi nula por lo que habrÃ¡ que elegir una forma de mostrar a la gerencia los resultados. \n",
        "\n",
        "Vamos a organizar los datos para mostrar solamente el top de ciudades con mejores profits. "
      ],
      "metadata": {
        "id": "MRWnUfyWXK4F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "# Ordenar los datos por profit en orden descendente y seleccionar solo las primeras 10 ciudades\n",
        "df_top_cities <- df%>%\n",
        "arrange(desc(City))%>%\n",
        "head(10)\n",
        "\n",
        "# Crear plot\n",
        "ggplot(df_top_cities, aes(x= Profit, y= City)) +\n",
        "  geom_col() +\n",
        "  coord_flip() +\n",
        "  labs(title = \"Top 10 ciudades por Profit\", x = \"Profit\", y = \"City\")"
      ],
      "metadata": {
        "id": "XjZWbFD0XazI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "6644b92f-5c2c-4b11-c8f6-441340044562"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Seleccionar las 10 ciudades con mayores profits\n",
        "df_top_cities = df_positives.sort_values(by='Profit', ascending=False).head(10)[['City', 'Profit']]\n"
      ],
      "metadata": {
        "id": "2DooIg_GXlNb"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear plot\n",
        "sns.barplot()\n",
        "plt.title('Ciudades con mayores profits positivos')\n",
        "plt.xlabel('Ciudad')\n",
        "plt.ylabel('Profit')\n",
        "plt.xticks(rotation=90, ha='right', fontsize=8)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "c1o7W1ZgY2QX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "a0d3f876-d07c-4796-bbc9-1255fe9458ae"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Usando la misma base de datos crea un agrupado por regiones y saca la media de las ventas de cada regiÃ³n. Esta media asignala a una columna nueva de un dataframe llamado mean_sales. "
      ],
      "metadata": {
        "id": "cuUZemJwZkT5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "mean_sales = df %>%\n",
        "group_by(Region)%>%\n",
        "summarize (mean_sales = mean(Sales))\n",
        "\n",
        "print(summary(mean_sales))\n",
        "print(mean_sales)"
      ],
      "metadata": {
        "id": "RJouQZkcaAwb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "56d2801b-ecaa-45e7-cebb-45a4293bdb7e"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Region            mean_sales   \n",
            " Length:4           Min.   :34.72  \n",
            " Class :character   1st Qu.:36.58  \n",
            " Mode  :character   Median :38.28  \n",
            "                    Mean   :37.86  \n",
            "                    3rd Qu.:39.56  \n",
            "                    Max.   :40.16  \n",
            "# A tibble: 4 Ã— 2\n",
            "  Region  mean_sales\n",
            "  <chr>        <dbl>\n",
            "1 Central       34.7\n",
            "2 East          39.4\n",
            "3 South         37.2\n",
            "4 West          40.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Agrupar por regiones y calcular la media de ventas\n",
        "mean_sales = df.groupby('Region')['Sales'].mean().reset_index()\n",
        "\n",
        "# Renombrar las columnas del dataframe\n",
        "mean_sales.columns = ['Region', 'mean_sales']\n",
        "\n",
        "mean_sales\n"
      ],
      "metadata": {
        "id": "171Lp3n9aOFq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "b2a12790-5927-483b-d5af-4d012672aa79"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Region  mean_sales\n",
              "0  Central  215.772661\n",
              "1     East  238.336110\n",
              "2    South  241.803645\n",
              "3     West  226.493233"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c5f5adc-2374-44e1-b3e4-e44c396befa0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Region</th>\n",
              "      <th>mean_sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Central</td>\n",
              "      <td>215.772661</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>East</td>\n",
              "      <td>238.336110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>South</td>\n",
              "      <td>241.803645</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>West</td>\n",
              "      <td>226.493233</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c5f5adc-2374-44e1-b3e4-e44c396befa0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8c5f5adc-2374-44e1-b3e4-e44c396befa0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8c5f5adc-2374-44e1-b3e4-e44c396befa0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora vamos a graficar estos datos de forma tal que se genere un grÃ¡fico de disperciÃ³n en el que se creen diferentes formas y colores para cada color, asÃ­ podremos comparar las medias de las ventas de cada regiÃ³n. "
      ],
      "metadata": {
        "id": "5yUoeewdlc0G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como clave para este ejercicio... para la conformaciÃ³n de las figuras en R deberÃ¡n usar el comando shape= y color= \n",
        "\n",
        "Mientras que en python hue=' ', style=' ' podrÃ­an usar los comandos\n"
      ],
      "metadata": {
        "id": "ZcdPsNpDdIOc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "-O5bQvQc6G0w"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear plot\n",
        "sns.scatterplot(x='Region', y='mean_sales', hue='Region', style='Region', data=mean_sales, palette='husl', markers=True)\n",
        "\n",
        "# Configurar plot\n",
        "plt.title('RelaciÃ³n entre ventas y profit por regiÃ³n')\n",
        "plt.xlabel('Region')\n",
        "plt.ylabel('Media de Ventas')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Tfbozk0Dc-qj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "43c9f583-fe1f-4812-b92e-f596ce1e2041"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "\n",
        "ggplot(data= mean_sales, aes(x= Region, y= mean_sales, color =Region, shape = Region)) +\n",
        "  geom_point() +\n",
        "  labs(title = \"RelaciÃ³n entre ventas y profit por regiÃ³n\", x = \"Region\", y = \"Media de Ventas\") \n"
      ],
      "metadata": {
        "id": "YAW2CmNakayM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "c4b66017-2796-487c-e29a-bad9ffcdfe83"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ya para finalizar vamos a tomar la variale ventas y crearemos un registro de ventas por ciudad, en dÃ³nde queremos saber cuÃ¡l es el promedio de ventas para cada ciudad, pero tambiÃ©nq uedremos ver cuÃ¡l es el valor que corresponde al 50% de las ventas (mediana) de cada ciudad... estos valores los vamos a agregar a un dataframe nuevo llamado 'Sales_by_city'\n",
        "\n",
        "Como tip para lograrlo, en R podremos usar el comando across que generalmente usamos como dplyr::across() y en python despues de haber generado un groupby, simplemente conectaremos una funciÃ³n .agg para implementar una lista con las funciones matemÃ¡ticas que queremos obtener. "
      ],
      "metadata": {
        "id": "bSWm4tlgr7Tv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%R\n",
        "# Calcular la media, moda y mediana de las ventas por ciudad\n",
        "sales_by_city <- df %>%\n",
        "  group_by(City) %>%\n",
        "  summarise(dplyr::across(Sales , list(mean = mean, median = median)))\n",
        "\n",
        "# Ver los resultados\n",
        "sales_by_city"
      ],
      "metadata": {
        "id": "jMG5HCxvp-lc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9973ae27-ec37-4eb2-cfef-63b02b95cc8d"
      },
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "# A tibble: 498 Ã— 3\n",
            "   City        Sales_mean Sales_median\n",
            "   <chr>            <dbl>        <dbl>\n",
            " 1 Aberdeen         25.5         25.5 \n",
            " 2 Abilene           1.39         1.39\n",
            " 3 Akron            23.0         15.0 \n",
            " 4 Albuquerque      52.9         39.3 \n",
            " 5 Alexandria       30.0         23.0 \n",
            " 6 Allen            15.4         15.9 \n",
            " 7 Allentown        31.7         16.7 \n",
            " 8 Altoona          10.2         10.2 \n",
            " 9 Amarillo         35.3         25.9 \n",
            "10 Anaheim          56.2         44.7 \n",
            "# â„¹ 488 more rows\n",
            "# â„¹ Use `print(n = ...)` to see more rows\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular la media, moda y mediana de las ventas por ciudad\n",
        "sales_by_city = df.groupby('City').agg({'Sales':['mean' ,'median']})\n",
        "\n",
        "# Ver los resultados\n",
        "print(sales_by_city)"
      ],
      "metadata": {
        "id": "RRWFgXftrmvm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42dac1d5-b102-4e5c-ce97-0038aac6c716"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                  Sales         \n",
            "                   mean   median\n",
            "City                            \n",
            "Aberdeen      25.500000   25.500\n",
            "Abilene        1.392000    1.392\n",
            "Akron        129.999333   25.560\n",
            "Albuquerque  158.582857  104.525\n",
            "Alexandria   344.973125   27.025\n",
            "...                 ...      ...\n",
            "Woonsocket    48.887500   48.615\n",
            "Yonkers      510.511067   59.520\n",
            "York         163.595600   65.584\n",
            "Yucaipa       50.800000   50.800\n",
            "Yuma         210.216250  115.192\n",
            "\n",
            "[531 rows x 2 columns]\n"
          ]
        }
      ]
    }
  ]
}